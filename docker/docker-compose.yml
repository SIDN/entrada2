# NOTE: all credentials used in this file are for testing and do not pose a security risk
# profiles:
# - test: start entrada and all dependencies for testing
#
# example:
# docker-compose --profile test up --scale entrada-worker=2
# any other profile will only start the dependencies
services:
  influxdb:
    image: influxdb:latest
    restart: always
    env_file:
       - path: ./docker.env
    volumes:
      - entradaInfluxDbVolume:/var/lib/influxdb2:rw
    ports:
      - "8086:8086"
  rabbitmq:
    image: rabbitmq:3-management
    restart: always
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 3
    env_file:
       - path: ./docker.env
    ports:
      - "5672:5672"
      - "15672:15672"
  minio:
    image: quay.io/minio/minio:latest
    restart: always
    env_file:
       - path: ./docker.env
    volumes:
      - entradaMinioVolume:/data:rw
    ports:
      - "9000:9000"
      - "9090:9090"
    command: server /data --console-address ":9090"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    links:
      - rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
  createbucket:
    image: minio/mc
    env_file:
       - path: ./docker.env
    depends_on:
      minio:
        condition: service_healthy
    links:
      - minio
    entrypoint: ["/bin/sh","/init-minio.sh"]
    volumes:
       - ./init-minio.sh:/init-minio.sh
  postgresql:
    image: postgres:17
    restart: always
    env_file:
       - path: ./docker.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - "5433:5432" 
    volumes:
      - ./initdb.sh:/docker-entrypoint-initdb.d/initdb.sh
      - entradaPostgresqlVolume:/pgdata:rw
  trino:
    image: trinodb/trino:446
    restart: always
    env_file:
       - path: ./docker.env
    volumes:
      - ./iceberg.properties:/etc/trino/catalog/iceberg.properties
    ports:
      - "8085:8080"
    links:
      - minio  
      - postgresql
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
  entrada-master:
    image: sidnlabs/entrada2:0.0.12
    profiles: ["test"]
    restart: always
    env_file:
       - path: ./docker.env
    environment:
      - JAVA_OPTS=-Xmx4g -Xms4g
      
        # additional opts for jmx monitoring
        #    -Dcom.sun.management.jmxremote
        #    -Dcom.sun.management.jmxremote.rmi.port=2222
        #    -Dcom.sun.management.jmxremote.port=2222
        #    -Dcom.sun.management.jmxremote.ssl=false
        #    -Dcom.sun.management.jmxremote.authenticate=false
        #    -Djava.rmi.server.hostname=<need hostname/ip otherwise mission control jmx connection fails>
    ports:
      - "8080:8080" 
      #- "2222:2222"
    links:
      - influxdb
      - rabbitmq
      - minio
      - postgresql
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      createbucket:
        condition: service_completed_successfully
  entrada-worker:
    image: sidnlabs/entrada2:0.0.12
    profiles: ["test"]
    restart: always
    env_file:
       - path: ./docker.env
    environment:
      - ENTRADA_LEADER=false
      - JAVA_OPTS=-Xmx4g -Xms4g
    links:
      - influxdb
      - rabbitmq
      - minio
      - postgresql
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      createbucket:
        condition: service_completed_successfully
      entrada-master:
        condition: service_started
volumes:
  entradaInfluxDbVolume:
  entradaMinioVolume:
  entradaPostgresqlVolume:
  

